// GENERATED AUTOMATICALLY FROM 'Assets/InputMaster.inputactions'

using System;
using UnityEngine;
using UnityEngine.Experimental.Input;


namespace Input
{
    [Serializable]
    public class PlayerInput : InputActionAssetReference
    {
        public PlayerInput()
        {
        }
        public PlayerInput(InputActionAsset asset)
            : base(asset)
        {
        }
        private bool m_Initialized;
        private void Initialize()
        {
            // Player1
            m_Player1 = asset.GetActionMap("Player1");
            m_Player1_movement = m_Player1.GetAction("movement");
            // Menu
            m_Menu = asset.GetActionMap("Menu");
            m_Menu_Newaction = m_Menu.GetAction("New action");
            m_Initialized = true;
        }
        private void Uninitialize()
        {
            m_Player1 = null;
            m_Player1_movement = null;
            m_Menu = null;
            m_Menu_Newaction = null;
            m_Initialized = false;
        }
        public void SetAsset(InputActionAsset newAsset)
        {
            if (newAsset == asset) return;
            if (m_Initialized) Uninitialize();
            asset = newAsset;
        }
        public override void MakePrivateCopyOfActions()
        {
            SetAsset(ScriptableObject.Instantiate(asset));
        }
        // Player1
        private InputActionMap m_Player1;
        private InputAction m_Player1_movement;
        public struct Player1Actions
        {
            private PlayerInput m_Wrapper;
            public Player1Actions(PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @movement { get { return m_Wrapper.m_Player1_movement; } }
            public InputActionMap Get() { return m_Wrapper.m_Player1; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled { get { return Get().enabled; } }
            public InputActionMap Clone() { return Get().Clone(); }
            public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        }
        public Player1Actions @Player1
        {
            get
            {
                if (!m_Initialized) Initialize();
                return new Player1Actions(this);
            }
        }
        // Menu
        private InputActionMap m_Menu;
        private InputAction m_Menu_Newaction;
        public struct MenuActions
        {
            private PlayerInput m_Wrapper;
            public MenuActions(PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction { get { return m_Wrapper.m_Menu_Newaction; } }
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled { get { return Get().enabled; } }
            public InputActionMap Clone() { return Get().Clone(); }
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        }
        public MenuActions @Menu
        {
            get
            {
                if (!m_Initialized) Initialize();
                return new MenuActions(this);
            }
        }
        private int m_PS4SchemeIndex = -1;
        public InputControlScheme PS4Scheme
        {
            get

            {
                if (m_PS4SchemeIndex == -1) m_PS4SchemeIndex = asset.GetControlSchemeIndex("PS4");
                return asset.controlSchemes[m_PS4SchemeIndex];
            }
        }
        private int m_KeyBoardandMouseSchemeIndex = -1;
        public InputControlScheme KeyBoardandMouseScheme
        {
            get

            {
                if (m_KeyBoardandMouseSchemeIndex == -1) m_KeyBoardandMouseSchemeIndex = asset.GetControlSchemeIndex("KeyBoard and Mouse");
                return asset.controlSchemes[m_KeyBoardandMouseSchemeIndex];
            }
        }
    }
}
